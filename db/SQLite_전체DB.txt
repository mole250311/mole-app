using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Security.Cryptography;
using System.Text;

namespace ConsoleApp2
{
    internal class Program
    {
        // SQLite 데이터베이스 파일명
        private const string DbFileName = "myApp_sqlite.db";
        private const string connectionString = $"Data Source={DbFileName};Version=3;";

        static void Main(string[] args)
        {
            try
            {
                CreateTables();
                Console.WriteLine("SQLite 데이터베이스 연결 성공!");
            }
            catch (SQLiteException ex)
            {
                Console.WriteLine($"[오류] 데이터베이스 생성에 실패했습니다: {ex.Message}");
                Console.ReadKey();
                return;
            }

            while (true)
            {
                Console.WriteLine("\n[API 서버 DB 관리 도구 (SQLite)]");
                Console.WriteLine("--- 조회 ---");
                Console.WriteLine("[1] 사용자 리스트 조회");
                Console.WriteLine("[2] 사용자별 퀴즈 풀이 로그 조회");
                Console.WriteLine("[3] 사용자별 즐겨찾기 조회");
                Console.WriteLine("[4] 전체 퀴즈 문제 조회");
                Console.WriteLine("[5] 인증 코드 조회");
                Console.WriteLine("[6] 공지사항 목록 보기");
                Console.WriteLine("--- 데이터 관리 ---");
                Console.WriteLine("[8] 전체 샘플 데이터 삽입");
                Console.WriteLine("[9] 공지사항 작성");
                Console.WriteLine("[10] 사용자 삭제");
                Console.WriteLine("-----------------");
                Console.WriteLine("[0] 종료");
                Console.Write("선택: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1": ShowAllUsers(); break;
                    case "2": ShowUserQuizLog(); break;
                    case "3": ShowUserFavorites(); break;
                    case "4": ShowAllQuizzes(); break;
                    case "5": ShowAuthCodes(); break; // 함수 이름 변경
                    case "6": ShowNotices(); break;
                    case "8": InsertAllSampleData(); break;
                    case "9": WriteNotice(); break;
                    case "10": DeleteUser(); break;
                    case "0": return;
                    default: Console.WriteLine("잘못된 입력입니다."); break;
                }
            }
        }

        static void CreateTables()
        {
            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                // 외래 키 제약 조건 활성화
                using (var pragma = new SQLiteCommand("PRAGMA foreign_keys = ON;", conn))
                    pragma.ExecuteNonQuery();

                string createAllTables = @"
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL UNIQUE,
                        password TEXT NOT NULL,
                        salt TEXT NOT NULL,
                        email TEXT NOT NULL UNIQUE,
                        grade TEXT,
                        major TEXT,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    );
                    CREATE TABLE IF NOT EXISTS quiz (
                        quiz_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        amino_acid TEXT, topic TEXT, question TEXT NOT NULL,
                        options TEXT, answer TEXT NOT NULL, grade TEXT
                    );
                    CREATE TABLE IF NOT EXISTS quiz_log (
                        log_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL, 
                        quiz_id INTEGER NOT NULL,
                        is_correct INTEGER NOT NULL, -- 0 for false, 1 for true
                        answered_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                        FOREIGN KEY (quiz_id) REFERENCES quiz(quiz_id) ON DELETE CASCADE
                    );
                    CREATE TABLE IF NOT EXISTS user_favorite (
                        Favorite_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL, 
                        chapter_id TEXT NOT NULL,
                        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
                    );
                    /* --- 수정된 부분 ---
                     * 테이블 이름을 auth_codes로 변경
                     * expires_at을 created_at으로 변경하고 DEFAULT 값 설정
                     */
                    CREATE TABLE IF NOT EXISTS auth_codes (
                        email TEXT PRIMARY KEY,
                        code TEXT NOT NULL,
                        created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
                    );
                    CREATE TABLE IF NOT EXISTS notices (
                        notice_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        title TEXT NOT NULL, content TEXT,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    );";
                var cmd = new SQLiteCommand(createAllTables, conn);
                cmd.ExecuteNonQuery();
            }
        }

        static void InsertAllSampleData()
        {
            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                using (var transaction = conn.BeginTransaction())
                {
                    try
                    {
                        // 1. 샘플 사용자
                        string salt;
                        string hashedPassword = PasswordHasher.HashPassword("password123", out salt);
                        var userCmd = new SQLiteCommand(@"INSERT OR IGNORE INTO users (username, password, salt, email, grade, major) VALUES ('김철수', @pwd, @salt, 'test@example.com', '1학년', '화학과');", conn, transaction);
                        userCmd.Parameters.AddWithValue("@pwd", hashedPassword);
                        userCmd.Parameters.AddWithValue("@salt", salt);
                        userCmd.ExecuteNonQuery();
                        long userId = conn.LastInsertRowId;

                        // 2. 샘플 퀴즈
                        var quizCmd = new SQLiteCommand(@"INSERT OR IGNORE INTO quiz (amino_acid, topic, question, options, answer, grade) VALUES ('Glycine', '약어', 'Glycine의 한 글자 약어는 무엇인가요?', '[""A"", ""G"", ""G"", ""L""]', 'G', '1학년');", conn, transaction);
                        quizCmd.ExecuteNonQuery();
                        long quizId = conn.LastInsertRowId;

                        // 3. 샘플 퀴즈 풀이 로그
                        var logCmd = new SQLiteCommand("INSERT OR IGNORE INTO quiz_log (user_id, quiz_id, is_correct) VALUES (@uid, @qid, 1);", conn, transaction);
                        logCmd.Parameters.AddWithValue("@uid", userId);
                        logCmd.Parameters.AddWithValue("@qid", quizId);
                        logCmd.ExecuteNonQuery();

                        // 4. 샘플 즐겨찾기
                        var favCmd = new SQLiteCommand("INSERT OR IGNORE INTO user_favorite (user_id, chapter_id) VALUES (@uid, 'Valine');", conn, transaction);
                        favCmd.Parameters.AddWithValue("@uid", userId);
                        favCmd.ExecuteNonQuery();

                        // 5. 샘플 인증 코드 (수정된 부분)
                        var codeCmd = new SQLiteCommand(@"INSERT OR IGNORE INTO auth_codes (email, code) VALUES ('test@example.com', '123456');", conn, transaction);
                        codeCmd.ExecuteNonQuery();

                        // 6. 샘플 공지사항
                        var noticeCmd = new SQLiteCommand(@"INSERT OR IGNORE INTO notices (title, content) VALUES ('서비스 점검 안내', '오늘 밤 12시에 서비스 점검이 있습니다.');", conn, transaction);
                        noticeCmd.ExecuteNonQuery();

                        transaction.Commit();
                        Console.WriteLine("모든 샘플 데이터가 성공적으로 삽입되었습니다.");
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        Console.WriteLine($"데이터 삽입 중 오류 발생: {ex.Message}");
                    }
                }
            }
        }

        static void ShowAllUsers()
        {
            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand("SELECT user_id, username, email, grade, major, created_at FROM users", conn);
                Console.WriteLine("\n--- 사용자 리스트 ---");
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Console.WriteLine($"ID: {reader["user_id"]}, 이름: {reader["username"]}, 이메일: {reader["email"]}, 학년: {reader["grade"]}, 전공: {reader["major"]}, 가입일: {reader["created_at"]}");
                    }
                }
            }
        }

        static void ShowUserQuizLog()
        {
            Console.Write("로그를 조회할 사용자의 ID를 입력하세요: ");
            if (!int.TryParse(Console.ReadLine(), out int userId)) return;

            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand(@"
                    SELECT q.question, q.answer, l.is_correct, l.answered_at
                    FROM quiz_log l
                    JOIN quiz q ON l.quiz_id = q.quiz_id
                    WHERE l.user_id = @user_id", conn);
                cmd.Parameters.AddWithValue("@user_id", userId);

                Console.WriteLine($"\n--- [사용자 ID: {userId}] 퀴즈 풀이 로그 ---");
                using (var reader = cmd.ExecuteReader())
                {
                    if (!reader.HasRows) Console.WriteLine("풀이 기록이 없습니다.");
                    while (reader.Read())
                    {
                        Console.WriteLine($"문제: {reader["question"]}");
                        Console.WriteLine($" ├ 정답: {reader["answer"]}");
                        Console.WriteLine($" └ 결과: {(Convert.ToInt64(reader["is_correct"]) == 1 ? "정답" : "오답")} ({reader["answered_at"]})");
                        Console.WriteLine("--------------------");
                    }
                }
            }
        }

        static void ShowUserFavorites()
        {
            Console.Write("즐겨찾기를 조회할 사용자의 ID를 입력하세요: ");
            if (!int.TryParse(Console.ReadLine(), out int userId)) return;

            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand("SELECT chapter_id FROM user_favorite WHERE user_id = @user_id", conn);
                cmd.Parameters.AddWithValue("@user_id", userId);

                Console.WriteLine($"\n--- [사용자 ID: {userId}] 즐겨찾기 목록 ---");
                using (var reader = cmd.ExecuteReader())
                {
                    if (!reader.HasRows) Console.WriteLine("즐겨찾기한 챕터가 없습니다.");
                    while (reader.Read())
                    {
                        Console.WriteLine($"- {reader["chapter_id"]}");
                    }
                }
            }
        }

        static void ShowAllQuizzes()
        {
            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand("SELECT * FROM quiz", conn);
                Console.WriteLine("\n--- 전체 퀴즈 문제 목록 ---");
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Console.WriteLine($"[ID: {reader["quiz_id"]}] {reader["question"]}");
                        Console.WriteLine($"  - 카테고리: {reader["amino_acid"]} ({reader["topic"]}) | 대상: {reader["grade"]}");
                        Console.WriteLine($"  - 보기: {reader["options"]} | 정답: {reader["answer"]}");
                    }
                }
            }
        }

        // 함수 이름 및 내용 변경
        static void ShowAuthCodes()
        {
            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand("SELECT email, code, created_at FROM auth_codes", conn);
                Console.WriteLine("\n--- 인증 코드 목록 ---");
                using (var reader = cmd.ExecuteReader())
                {
                    if (!reader.HasRows) Console.WriteLine("저장된 인증 코드가 없습니다.");
                    while (reader.Read())
                    {
                        Console.WriteLine($"이메일: {reader["email"]}, 코드: {reader["code"]}, 생성일: {reader["created_at"]}");
                    }
                }
            }
        }

        static void ShowNotices()
        {
            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand("SELECT notice_id, title, content, created_at FROM notices ORDER BY created_at DESC", conn);
                Console.WriteLine("\n--- 공지사항 목록 ---");
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Console.WriteLine($"[ID: {reader["notice_id"]}] {reader["title"]} ({reader["created_at"]})");
                        Console.WriteLine($"  └ {reader["content"]}");
                    }
                }
            }
        }

        static void WriteNotice()
        {
            Console.Write("공지사항 제목: ");
            string title = Console.ReadLine();
            Console.Write("공지사항 내용: ");
            string content = Console.ReadLine();

            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand("INSERT INTO notices (title, content) VALUES (@title, @content)", conn);
                cmd.Parameters.AddWithValue("@title", title);
                cmd.Parameters.AddWithValue("@content", content);
                cmd.ExecuteNonQuery();
                Console.WriteLine("공지사항이 성공적으로 작성되었습니다.");
            }
        }

        static void DeleteUser()
        {
            Console.Write("삭제할 사용자의 ID를 입력하세요: ");
            if (!int.TryParse(Console.ReadLine(), out int userId)) return;

            using (var conn = new SQLiteConnection(connectionString))
            {
                conn.Open();
                var cmd = new SQLiteCommand("DELETE FROM users WHERE user_id = @uid", conn);
                cmd.Parameters.AddWithValue("@uid", userId);
                int rows = cmd.ExecuteNonQuery();
                if (rows > 0) Console.WriteLine("사용자가 삭제되었습니다.");
                else Console.WriteLine("해당 ID의 사용자를 찾지 못했습니다.");
            }
        }

        public static class PasswordHasher
        {
            public static string HashPassword(string password, out string salt)
            {
                byte[] saltBytes = new byte[16];
                using (var rng = RandomNumberGenerator.Create())
                {
                    rng.GetBytes(saltBytes);
                }
                salt = Convert.ToBase64String(saltBytes);
                using (var pbkdf2 = new Rfc2898DeriveBytes(password, saltBytes, 100000, HashAlgorithmName.SHA256))
                {
                    byte[] hash = pbkdf2.GetBytes(32);
                    return Convert.ToBase64String(hash);
                }
            }

            public static bool VerifyPassword(string password, string storedHash, string storedSalt)
            {
                byte[] saltBytes = Convert.FromBase64String(storedSalt);
                using (var pbkdf2 = new Rfc2898DeriveBytes(password, saltBytes, 100000, HashAlgorithmName.SHA256))
                {
                    byte[] hash = pbkdf2.GetBytes(32);
                    return Convert.ToBase64String(hash) == storedHash;
                }
            }
        }
    }
}
