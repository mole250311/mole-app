from flask import Flask, request, jsonify
import smtplib
from email.mime.text import MIMEText
import random
import mysql.connector
import re # 이메일 형식 검증을 위한 라이브러리

# --- Flask 앱 초기화 ---
app = Flask(__name__)

# --- 1. 서버 설정 (이전과 동일) ---
MAIL_PROVIDERS = {
    'gmail': {
        'server': "smtp.gmail.com", 'port': 587,
        'user': "YOUR_GMAIL_ADDRESS@gmail.com", 'password': "YOUR_GMAIL_16_DIGIT_APP_PASSWORD"
    },
    'naver': {
        'server': "smtp.naver.com", 'port': 587,
        'user': "YOUR_NAVER_ADDRESS@naver.com", 'password': "YOUR_NAVER_APP_PASSWORD"
    }
}
ACTIVE_PROVIDER_NAME = 'gmail'
ACTIVE_PROVIDER = MAIL_PROVIDERS[ACTIVE_PROVIDER_NAME]

DB_CONFIG = {
    'host': '127.0.0.1', 'database': 'NuSchema',
    'user': 'root', 'password': 'YOUR_MYSQL_PASSWORD'
}
# ---------------------------------------------------------

# 이메일 주소 형식 검증을 위한 정규 표현식
EMAIL_REGEX = re.compile(r"^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")

@app.route('/send-auth-code', methods=['POST'])
def send_auth_code():
    """인증 코드를 발송하는 API (상세 오류 처리 추가)"""
    try:
        data = request.get_json()
        if not data or 'email' not in data:
            return jsonify({"error": "요청 본문에 'email' 필드가 필요합니다."}), 400
        
        email = data['email']
        # ✨ 1. 입력값 검증 강화
        if not EMAIL_REGEX.match(email):
            return jsonify({"error": "유효하지 않은 이메일 형식입니다."}), 400

    except Exception:
        return jsonify({"error": "잘못된 요청 형식입니다. (JSON 확인 필요)"}), 400

    auth_code = str(random.randint(100000, 999999))

    # --- DB 작업 ---
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()
        save_query = """
            INSERT INTO auth_codes (email, code, created_at) VALUES (%s, %s, CURRENT_TIMESTAMP)
            ON DUPLICATE KEY UPDATE code = VALUES(code), created_at = CURRENT_TIMESTAMP
        """
        cursor.execute(save_query, (email, auth_code))
        conn.commit()
    except mysql.connector.Error as err:
        # ✨ 2. 구체적인 DB 오류 로그
        print(f"데이터베이스 오류 발생: {err}")
        return jsonify({"error": "서버 데이터베이스에 문제가 발생했습니다."}), 500
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()

    # --- SMTP 이메일 발송 ---
    try:
        msg_body = f"안녕하세요!\n\n요청하신 인증 코드는 아래와 같습니다.\n\n인증 코드: [{auth_code}]\n\n감사합니다."
        msg = MIMEText(msg_body)
        msg['Subject'] = "[내 앱 이름] 이메일 인증 코드 안내"
        msg['From'] = ACTIVE_PROVIDER['user']
        msg['To'] = email

        with smtplib.SMTP(ACTIVE_PROVIDER['server'], ACTIVE_PROVIDER['port']) as server:
            server.starttls()
            server.login(ACTIVE_PROVIDER['user'], ACTIVE_PROVIDER['password'])
            server.send_message(msg)
            
    # ✨ 3. 구체적인 SMTP 오류 처리
    except smtplib.SMTPAuthenticationError:
        print(f"SMTP 인증 실패: '{ACTIVE_PROVIDER_NAME}' 계정의 사용자 이름 또는 비밀번호(앱 비밀번호)를 확인하세요.")
        return jsonify({"error": "이메일 서버 인증에 실패했습니다."}), 500
    except smtplib.SMTPRecipientsRefused:
        print(f"수신자 거부됨: '{email}' 주소가 유효하지 않거나 존재하지 않을 수 있습니다.")
        return jsonify({"error": "수신자 이메일 주소가 유효하지 않습니다."}), 400
    except Exception as e:
        print(f"이메일 발송 중 알 수 없는 오류 발생: {e}")
        return jsonify({"error": "이메일 발송에 실패했습니다."}), 500

    return jsonify({"message": f"인증 코드가 성공적으로 발송되었습니다."}), 200


@app.route('/verify-code', methods=['POST'])
def verify_code():
    """인증 코드를 검증하는 API (상세 오류 처리 추가)"""
    try:
        data = request.get_json()
        if not data or 'email' not in data or 'code' not in data:
            return jsonify({"error": "요청 본문에 'email'과 'code' 필드가 모두 필요합니다."}), 400
        
        email = data['email']
        user_code = data['code']
    except Exception:
        return jsonify({"error": "잘못된 요청 형식입니다. (JSON 확인 필요)"}), 400

    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        verify_query = """
            SELECT email FROM auth_codes 
            WHERE email = %s AND code = %s AND created_at > NOW() - INTERVAL 5 MINUTE
        """
        cursor.execute(verify_query, (email, user_code))
        result = cursor.fetchone()

        if result:
            delete_query = "DELETE FROM auth_codes WHERE email = %s"
            cursor.execute(delete_query, (email,))
            conn.commit()
            return jsonify({"message": "인증에 성공했습니다."}), 200
        else:
            return jsonify({"error": "인증 코드가 유효하지 않거나 만료되었습니다."}), 400

    except mysql.connector.Error as err:
        print(f"데이터베이스 오류 발생: {err}")
        return jsonify({"error": "서버 데이터베이스에 문제가 발생했습니다."}), 500
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
